#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 vertex_texture;

out vec2 TextureCoords;
out vec3 LightIntensity;
out vec3 FragPos;
out vec3 Normal;



uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;
uniform vec3 lightDirection;
uniform vec3 Ld;
uniform vec3 Kd;

void main(){

  FragPos = vec3(model * vec4(vertex_position, 1.0));
  mat3 ModelViewMatrix = mat3(view * model) ;
  vec3 Normal = normalize(ModelViewMatrix * vertex_normal);
  vec3 lightDirToFragment = normalize(-lightDirection);
  float diffuse = max( dot(lightDirToFragment,Normal), 0.0 );
  LightIntensity = Ld * Kd * diffuse;
  TextureCoords = vertex_texture;
  // Convert position to clip coordinates and pass along
  gl_Position = proj * view * model * vec4(vertex_position,1.0);
}


  