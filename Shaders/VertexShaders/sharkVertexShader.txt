#version 330

in vec3 vertex_position;
in vec3 vertex_normal;



out vec3 LightIntensity;
out vec3 FragPos;

vec3 Kd = vec3 (0.427f, 0.4039f, 0.443f); // color


uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;
uniform float rotation_angle;
uniform vec3 lightDirection;
uniform vec3 Ld;

vec3 swing_tail(vec3 vertex_position){
	vec3 new_position = vertex_position;
	if(vertex_position.z < -2.8){
		float displacement = (rotation_angle * vertex_position.z) / 30.0;
		new_position = vec3(vertex_position.x + displacement, vertex_position.y, vertex_position.z);
		
	}
	return new_position;
	
}

void main(){

  vec3 vertex_position_modified = swing_tail(vertex_position);
  FragPos = vec3(model * vec4(vertex_position_modified, 1.0));
  mat3 ModelViewMatrix = mat3(view * model) ;
  vec3 Normal = normalize(ModelViewMatrix * vertex_normal);
  vec3 lightDirToFragment = normalize(-lightDirection);
  float diffuse = max( dot(lightDirToFragment,Normal), 0.0 );
  LightIntensity = Ld * Kd * diffuse;

  // Convert position to clip coordinates and pass along
 
  gl_Position = proj * view * model * vec4(vertex_position_modified,1.0);
}


  